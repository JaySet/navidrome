syntax = "proto3";

package api;

option go_package = "github.com/navidrome/navidrome/plugins/api;api";

// go:plugin type=plugin version=1
service ArtistMetadataService {
  // Retrieves the MBID for an artist by id and name
  rpc GetArtistMBID(ArtistMBIDRequest) returns (ArtistMBIDResponse);

  // Retrieves the URL for an artist by id, name, and mbid
  rpc GetArtistURL(ArtistURLRequest) returns (ArtistURLResponse);

  // Retrieves the biography for an artist by id, name, and mbid
  rpc GetArtistBiography(ArtistBiographyRequest) returns (ArtistBiographyResponse);

  // Retrieves similar artists by id, name, mbid, and limit
  rpc GetSimilarArtists(ArtistSimilarRequest) returns (ArtistSimilarResponse);

  // Retrieves images for an artist by id, name, and mbid
  rpc GetArtistImages(ArtistImageRequest) returns (ArtistImageResponse);

  // Retrieves top songs for an artist by id, artistName, mbid, and count
  rpc GetArtistTopSongs(ArtistTopSongsRequest) returns (ArtistTopSongsResponse);
}

message ArtistMBIDRequest {
  string id = 1;
  string name = 2;
}

message ArtistMBIDResponse {
  string mbid = 1;
}

message ArtistURLRequest {
  string id = 1;
  string name = 2;
  string mbid = 3;
}

message ArtistURLResponse {
  string url = 1;
}

message ArtistBiographyRequest {
  string id = 1;
  string name = 2;
  string mbid = 3;
}

message ArtistBiographyResponse {
  string biography = 1;
}

message ArtistSimilarRequest {
  string id = 1;
  string name = 2;
  string mbid = 3;
  int32 limit = 4;
}

message Artist {
  string name = 1;
  string mbid = 2;
}

message ArtistSimilarResponse {
  repeated Artist artists = 1;
}

message ArtistImageRequest {
  string id = 1;
  string name = 2;
  string mbid = 3;
}

message ExternalImage {
  string url = 1;
  int32 size = 2;
}

message ArtistImageResponse {
  repeated ExternalImage images = 1;
}

message ArtistTopSongsRequest {
  string id = 1;
  string artistName = 2;
  string mbid = 3;
  int32 count = 4;
}

message Song {
  string name = 1;
  string mbid = 2;
}

message ArtistTopSongsResponse {
  repeated Song songs = 1;
}

// go:plugin type=plugin version=1
service AlbumMetadataService {
  // Retrieves album info by name, artist, and mbid
  rpc GetAlbumInfo(AlbumInfoRequest) returns (AlbumInfoResponse);

  // Retrieves images for an album by name, artist, and mbid
  rpc GetAlbumImages(AlbumImagesRequest) returns (AlbumImagesResponse);
}

message AlbumInfoRequest {
  string name = 1;
  string artist = 2;
  string mbid = 3;
}

message AlbumInfo {
  string name = 1;
  string mbid = 2;
  string description = 3;
  string url = 4;
}

message AlbumInfoResponse {
  AlbumInfo info = 1;
}

message AlbumImagesRequest {
  string name = 1;
  string artist = 2;
  string mbid = 3;
}

message AlbumImagesResponse {
  repeated ExternalImage images = 1;
}

// go:plugin type=plugin version=1
service ScrobblerService {
  rpc IsAuthorized(ScrobblerIsAuthorizedRequest) returns (ScrobblerIsAuthorizedResponse);
  rpc NowPlaying(ScrobblerNowPlayingRequest) returns (ScrobblerNowPlayingResponse);
  rpc Scrobble(ScrobblerScrobbleRequest) returns (ScrobblerScrobbleResponse);
}

message ScrobblerIsAuthorizedRequest {
  string user_id = 1;
}

message ScrobblerIsAuthorizedResponse {
  bool authorized = 1;
  string error = 2;
}

message TrackInfo {
  string id = 1;
  string mbid = 2;
  string name = 3;
  string album = 4;
  string album_mbid = 5;
  repeated Artist artists = 6;
  repeated Artist album_artists = 7;
  int32 length = 8; // seconds
}

message ScrobblerNowPlayingRequest {
  string user_id = 1;
  TrackInfo track = 2;
}

message ScrobblerNowPlayingResponse {
  string error = 1;
}

message ScrobblerScrobbleRequest {
  string user_id = 1;
  TrackInfo track = 2;
  int64 timestamp = 3;
}

message ScrobblerScrobbleResponse {
  string error = 1;
} 