//go:build wasip1

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v5.29.3
// source: api/api.proto

package api

import (
	context "context"
	wasm "github.com/knqyf263/go-plugin/wasm"
)

const MediaMetadataServicePluginAPIVersion = 1

//go:wasmexport media_metadata_service_api_version
func _media_metadata_service_api_version() uint64 {
	return MediaMetadataServicePluginAPIVersion
}

var mediaMetadataService MediaMetadataService

func RegisterMediaMetadataService(p MediaMetadataService) {
	mediaMetadataService = p
}

//go:wasmexport media_metadata_service_get_artist_mbid
func _media_metadata_service_get_artist_mbid(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(ArtistMBIDRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := mediaMetadataService.GetArtistMBID(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport media_metadata_service_get_artist_url
func _media_metadata_service_get_artist_url(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(ArtistURLRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := mediaMetadataService.GetArtistURL(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport media_metadata_service_get_artist_biography
func _media_metadata_service_get_artist_biography(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(ArtistBiographyRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := mediaMetadataService.GetArtistBiography(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport media_metadata_service_get_similar_artists
func _media_metadata_service_get_similar_artists(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(ArtistSimilarRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := mediaMetadataService.GetSimilarArtists(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport media_metadata_service_get_artist_images
func _media_metadata_service_get_artist_images(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(ArtistImageRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := mediaMetadataService.GetArtistImages(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport media_metadata_service_get_artist_top_songs
func _media_metadata_service_get_artist_top_songs(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(ArtistTopSongsRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := mediaMetadataService.GetArtistTopSongs(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport media_metadata_service_get_album_info
func _media_metadata_service_get_album_info(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(AlbumInfoRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := mediaMetadataService.GetAlbumInfo(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport media_metadata_service_get_album_images
func _media_metadata_service_get_album_images(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(AlbumImagesRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := mediaMetadataService.GetAlbumImages(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

const ScrobblerServicePluginAPIVersion = 1

//go:wasmexport scrobbler_service_api_version
func _scrobbler_service_api_version() uint64 {
	return ScrobblerServicePluginAPIVersion
}

var scrobblerService ScrobblerService

func RegisterScrobblerService(p ScrobblerService) {
	scrobblerService = p
}

//go:wasmexport scrobbler_service_is_authorized
func _scrobbler_service_is_authorized(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(ScrobblerIsAuthorizedRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := scrobblerService.IsAuthorized(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport scrobbler_service_now_playing
func _scrobbler_service_now_playing(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(ScrobblerNowPlayingRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := scrobblerService.NowPlaying(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport scrobbler_service_scrobble
func _scrobbler_service_scrobble(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(ScrobblerScrobbleRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := scrobblerService.Scrobble(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

const TimerCallbackServicePluginAPIVersion = 1

//go:wasmexport timer_callback_service_api_version
func _timer_callback_service_api_version() uint64 {
	return TimerCallbackServicePluginAPIVersion
}

var timerCallbackService TimerCallbackService

func RegisterTimerCallbackService(p TimerCallbackService) {
	timerCallbackService = p
}

//go:wasmexport timer_callback_service_on_timer_callback
func _timer_callback_service_on_timer_callback(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(TimerCallbackRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := timerCallbackService.OnTimerCallback(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

const InitServicePluginAPIVersion = 1

//go:wasmexport init_service_api_version
func _init_service_api_version() uint64 {
	return InitServicePluginAPIVersion
}

var initService InitService

func RegisterInitService(p InitService) {
	initService = p
}

//go:wasmexport init_service_on_init
func _init_service_on_init(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(InitRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := initService.OnInit(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}
